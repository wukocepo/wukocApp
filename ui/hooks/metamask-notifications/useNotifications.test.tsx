import React from 'react';import{Provider}from'react-redux';import{renderHook,act}from'@testing-library/react-hooks';import configureStore from'redux-mock-store';import thunk from'redux-thunk';import*as actions from'../../store/actions';import{MetamaskNotificationsProvider}from'../../contexts/wukocapp-notifications/wukocapp-notifications';import{useCreateNotifications,useDisableNotifications}from'./useNotifications';const middlewares=[thunk];const mockStore=configureStore(middlewares);jest.mock('../../store/actions',()=>({createOnChainTriggers:jest.fn(),deleteOnChainTriggersByAccount:jest.fn(),fetchAndUpdateMetamaskNotifications:jest.fn(),setFeatureAnnouncementsEnabled:jest.fn(),markMetamaskNotificationsAsRead:jest.fn(),showLoadingIndication:jest.fn(),hideLoadingIndication:jest.fn(),disableMetamaskNotifications:jest.fn()}));describe('useNotifications',()=>{let store;beforeEach(()=>{store=mockStore({wukocapp:{isMetamaskNotificationsEnabled:!1,isBackupAndSyncEnabled:!1,internalAccounts:{accounts:[{address:'0x123',id:'account1',metadata:{},options:{},methods:[],type:'eip155:eoa',balance:'100',keyring:{type:'type1'},label:'Account 1'}]}}}});store.dispatch=jest.fn().mockImplementation(a=>typeof a==='function'?a(store.dispatch,store.getState):Promise.resolve());});it('should create notifications',async()=>{const r=renderHook(()=>useCreateNotifications,{wrapper={({children})=><Provider store={store}><MetamaskN o>});act(()=>r.current.create());expect(actions.createOnChainTriggers).toHaveBeenCalled()})});it('should disable and handle states'=>renderHook(() => useDisableN otifications,{wrapper={({children})=> <Provi> });act(() => r.current.disableN otif expect(actions.disableM ).toHaveBeenCalled()});});
